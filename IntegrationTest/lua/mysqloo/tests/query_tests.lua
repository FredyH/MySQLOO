TestFramework:RegisterTest("[Query] last insert should return correct values", function(test)
	local db = TestFramework:ConnectToDatabase()
	TestFramework:RunQuery(db, [[DROP TABLE IF EXISTS last_insert_test]])
	TestFramework:RunQuery(db, [[CREATE TABLE last_insert_test(id INT AUTO_INCREMENT PRIMARY KEY)]])

	local qu = db:query("INSERT INTO last_insert_test VALUES()")
	function qu:onSuccess()
		test:shouldBeEqual(qu:lastInsert(), 1)
	end
	qu:start()
	local qu2 = db:query("INSERT INTO last_insert_test VALUES()")
	function qu2:onSuccess()
		test:shouldBeEqual(qu2:lastInsert(), 2)
	end
	qu2:start()
	local qu3 = db:query("INSERT INTO last_insert_test VALUES()")
	function qu3:onSuccess()
		test:shouldBeEqual(qu3:lastInsert(), 3)
		function qu3:onSuccess()
			test:shouldBeEqual(qu3:lastInsert(), 4)
			qu3.onSuccess = nil
			qu3:start()
			qu3:wait()
			test:shouldBeEqual(qu3:lastInsert(), 5)
			test:Complete()
		end
		qu3:start()
	end
	qu3:start()
end)

TestFramework:RegisterTest("[Query] affected rows should return correct values", function(test)
	local db = TestFramework:ConnectToDatabase()
	TestFramework:RunQuery(db, [[DROP TABLE IF EXISTS affected_rows_test]])
	TestFramework:RunQuery(db, [[CREATE TABLE affected_rows_test(id INT AUTO_INCREMENT PRIMARY KEY)]])
	TestFramework:RunQuery(db, "INSERT INTO affected_rows_test VALUES()")
	TestFramework:RunQuery(db, "INSERT INTO affected_rows_test VALUES()")
	TestFramework:RunQuery(db, "INSERT INTO affected_rows_test VALUES()")
	TestFramework:RunQuery(db, "INSERT INTO affected_rows_test VALUES()")
	local qu = db:query("DELETE FROM affected_rows_test WHERE id = 4")
	qu:start()
	qu:wait()
	test:shouldBeEqual(qu:affectedRows(), 1)
	qu:start()
	local qu2 = db:query("DELETE FROM affected_rows_test")
	function qu2:onSuccess()
		test:shouldBeEqual(qu2:affectedRows(), 3)
		function qu2:onSuccess()
			test:shouldBeEqual(qu2:affectedRows(), 0)
			test:Complete()
		end
		qu2:start()
	end
	qu2:start()
end)

TestFramework:RegisterTest("[Query] isRunning should return the correct value", function(test)
	local db = TestFramework:ConnectToDatabase()
	local qu = db:query("SELECT SLEEP(0.1)")
	test:shouldBeEqual(qu:isRunning(), false)
	function qu:onSuccess()
		test:shouldBeEqual(qu:isRunning(), true)
		timer.Simple(0.1, function()
			test:shouldBeEqual(qu:isRunning(), false)
			test:Complete()
		end)
	end
	qu:start()
	test:shouldBeEqual(qu:isRunning(), true)
end)

TestFramework:RegisterTest("[Query] should return correct data", function(test)
	local db = TestFramework:ConnectToDatabase()
	TestFramework:RunQuery(db, [[DROP TABLE IF EXISTS data_test]])
	TestFramework:RunQuery(db, [[CREATE TABLE data_test(id INT PRIMARY KEY, str VARCHAR(10), big BIGINT, bin BLOB, num DOUBLE, bool BIT)]])
	TestFramework:RunQuery(db, [[INSERT INTO data_test VALUES(1, '2', 8589934588, X'470047', 3.3, TRUE)]])
	TestFramework:RunQuery(db, [[INSERT INTO data_test VALUES(2, null, -8589930588, X'00AB', 10.1, FALSE)]])

	local qu = db:query("SELECT * FROM data_test")
	function qu:onSuccess(data)
		test:shouldBeEqual(data, qu:getData()) //Check that it is cached correctly
		test:shouldBeEqual(#data, 2)
		local row1 = data[1]
		test:shouldBeEqual(row1.id, 1)
		test:shouldBeEqual(row1.str, "2")
		test:shouldBeEqual(row1.big, 8589934588)
		test:shouldBeEqual(row1.bin, string.char(0x47,0x00,0x47))
		test:shouldBeEqual(row1.num, 3.3)
		test:shouldBeEqual(row1.bool, 1)
		local row2 = data[2]
		test:shouldBeEqual(row2.id, 2)
		test:shouldBeNil(row2.str)
		test:shouldBeEqual(row2.big, -8589930588)
		test:shouldBeEqual(row2.bin, string.char(0x00,0xAB))
		test:shouldBeEqual(row2.num, 10.1)
		test:shouldBeEqual(row2.bool, 0)
		test:Complete()
	end
	function qu:onError(err)
		print(err)
	end
	qu:start()
end)

TestFramework:RegisterTest("[Query] should return correct data if numeric is enabled", function(test)
	local db = TestFramework:ConnectToDatabase()
	local qu = db:query("SELECT 1, 2, 4")
	qu:setOption(mysqloo.OPTION_NUMERIC_FIELDS)
	function qu:onSuccess(data)
		test:shouldBeEqual(#data, 1)
		local row = data[1]
		test:shouldBeEqual(row[1], 1)
		test:shouldBeEqual(row[2], 2)
		test:shouldBeEqual(row[3], 4)
		test:shouldBeNil(row[4])
		test:Complete()
	end
	qu:start()
end)

TestFramework:RegisterTest("[Query] should return correct error", function(test)
	local db = TestFramework:ConnectToDatabase()
	local qu = db:query("SEsdg")
	function qu:onError(err)
		test:shouldBeEqual(qu:error(), err)
		test:shouldBeGreaterThan(#qu:error(), 0)
		test:Complete()
	end
	qu:start()
end)

TestFramework:RegisterTest("[Query] should return correct error", function(test)
	local db = TestFramework:ConnectToDatabase()
	local qu = db:query("SEsdg")
	function qu:onError(err)
		test:shouldBeEqual(qu:error(), err)
		test:shouldBeGreaterThan(#qu:error(), 0)
		timer.Simple(0.1, function()
			test:shouldBeEqual(qu:error(), err)
			test:Complete()
		end)
	end
	qu:start()
end)

TestFramework:RegisterTest("[Query] should return correct error if waiting", function(test)
	local db = TestFramework:ConnectToDatabase()
	local qu = db:query("SEsdg")
	qu:start()
	qu:wait()
	test:shouldBeGreaterThan(#qu:error(), 0)
	test:Complete()
end)

TestFramework:RegisterTest("[Query] prevent multiple statements if disabled", function(test)
	local db = mysqloo.connect(DatabaseSettings.Host, DatabaseSettings.Username, DatabaseSettings.Password, DatabaseSettings.Database, DatabaseSettings.Port)
	db:setMultiStatements(false)
	db:connect()
	db:wait()
	local qu = db:query("SELECT 1; SELECT 2;")
	function qu:onError()
		test:Complete()
	end
	function qu:onSuccess()
		test:Fail("Query should have failed but did not")
	end
	qu:start()
	qu:wait()
end)

TestFramework:RegisterTest("[Query] work correctly with multi statements and multiple results", function(test)
	local db = TestFramework:ConnectToDatabase()
	local qu = db:query("SELECT 1 as a; SELECT 2 as b;")
	qu:start()
	qu:wait()
	local data = qu:getData()
	test:shouldBeEqual(#data, 1)
	test:shouldBeEqual(data[1].a, 1)
	test:shouldBeEqual(qu:hasMoreResults(), true)

	qu:getNextResults()
	local newData = qu:getData()
	test:shouldNotBeEqual(newData, data)
	test:shouldBeEqual(#newData, 1)
	test:shouldBeEqual(newData[1].b, 2)
	test:shouldBeEqual(qu:hasMoreResults(), true)
	qu:getNextResults()
	test:shouldBeEqual(qu:hasMoreResults(), false)
	test:Complete()
end)

TestFramework:RegisterTest("[Query] work correctly with multi statements and multiple results with affectedRows/lastInserts", function(test)
	local db = TestFramework:ConnectToDatabase()
	TestFramework:RunQuery(db, [[DROP TABLE IF EXISTS last_insert_test]])
	TestFramework:RunQuery(db, [[CREATE TABLE last_insert_test(id INT AUTO_INCREMENT PRIMARY KEY)]])
	local qu = db:query("INSERT INTO last_insert_test VALUES(); INSERT INTO last_insert_test VALUES(); INSERT INTO last_insert_test VALUES()")
	qu:start()
	qu:wait()
	test:shouldBeEqual(qu:lastInsert(), 1)
	test:shouldBeEqual(qu:hasMoreResults(), true)
	qu:getNextResults()
	test:shouldBeEqual(qu:lastInsert(), 2)
	test:shouldBeEqual(qu:hasMoreResults(), true)
	qu:getNextResults()
	test:shouldBeEqual(qu:lastInsert(), 3)
	test:shouldBeEqual(qu:hasMoreResults(), true)
	qu:getNextResults()
	test:shouldBeEqual(qu:hasMoreResults(), false)

	local qu2 = db:query("DELETE FROM last_insert_test WHERE id = 1; DELETE FROM last_insert_test")
	qu2:start()
	qu2:wait()
	test:shouldBeEqual(qu2:affectedRows(), 1)
	test:shouldBeEqual(qu2:hasMoreResults(), true)
	qu2:getNextResults()
	test:shouldBeEqual(qu2:affectedRows(), 2)
	test:shouldBeEqual(qu2:hasMoreResults(), true)
	qu2:getNextResults()
	test:shouldBeEqual(qu2:hasMoreResults(), false)

	test:Complete()
end)

TestFramework:RegisterTest("[Query] call onData correctly", function(test)
	local db = TestFramework:ConnectToDatabase()
	local qu = db:query("SELECT 1 as a UNION ALL SELECT 2")
	local callCount = 0
	local sum = 0
	function qu:onSuccess(data) //onData is called before onSuccess
		test:shouldHaveLength(data, 2)
		test:shouldBeEqual(callCount, 2)
		test:shouldBeEqual(sum, 3)
		test:Complete()
	end
	function qu:onData(row)
		callCount = callCount + 1
		sum = sum + row.a
	end
	qu:start()
end)

TestFramework:RegisterTest("[Query] abort query correctly", function(test)
	local db = TestFramework:ConnectToDatabase()
	local qu = db:query("SELECT SLEEP(1)") //This should block for a bit
	qu:start()
	local qu2 = db:query("SELECT 1")
	qu2:start()
	function qu2:onAborted()
		test:Complete()
	end
	test:shouldBeEqual(qu2:abort(), true)
	test:shouldBeEqual(qu:abort(), false)
end)

TestFramework:RegisterTest("[Query] not crash if waiting on query of a failed database", function(test)
	local db = mysqloo.connect("127.0.0.1", "root", "test", "test", 33406)
	db:connect()
	local qu = db:query("SELECT 1")
	qu:start()
	function qu:onError()
		test:Complete()
	end
	qu:wait()
end)